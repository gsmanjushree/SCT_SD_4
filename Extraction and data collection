include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <libxml/HTMLparser.h>
#include <libxml/xpath.h>

// Struct to hold response data
struct Memory {
    char *response;
    size_t size;
};

// Callback function for writing data from libcurl
static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t realsize = size * nmemb;
    struct Memory *mem = (struct Memory *)userp;

    char *ptr = realloc(mem->response, mem->size + realsize + 1);
    if (ptr == NULL) {
        fprintf(stderr, "Not enough memory (realloc returned NULL)\n");
        return 0;
    }

    mem->response = ptr;
    memcpy(&(mem->response[mem->size]), contents, realsize);
    mem->size += realsize;
    mem->response[mem->size] = 0;

    return realsize;
}

// Function to perform an HTTP GET request
char *fetch_webpage(const char *url) {
    CURL *curl;
    CURLcode res;
    struct Memory chunk = {NULL, 0};

    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();
    if (!curl) {
        fprintf(stderr, "Failed to initialize CURL\n");
        return NULL;
    }

    curl_easy_setopt(curl, CURLOPT_URL, url);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);

    res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        free(chunk.response);
        chunk.response = NULL;
    }

    curl_easy_cleanup(curl);
    curl_global_cleanup();

    return chunk.response;
}

// Function to extract information using XPath
void extract_product_info(const char *html, const char *xpath_query, FILE *csv_file, const char *label) {
    htmlDocPtr doc = htmlReadMemory(html, strlen(html), NULL, NULL, HTML_PARSE_RECOVER | HTML_PARSE_NOERROR | HTML_PARSE_NOWARNING);
    if (!doc) {
        fprintf(stderr, "Failed to parse HTML\n");
        return;
    }

    xmlXPathContextPtr context = xmlXPathNewContext(doc);
    if (!context) {
        fprintf(stderr, "Failed to create XPath context\n");
        xmlFreeDoc(doc);
        return;
    }

    xmlXPathObjectPtr result = xmlXPathEvalExpression((const xmlChar *)xpath_query, context);
    if (!result) {
        fprintf(stderr, "Failed to evaluate XPath\n");
        xmlXPathFreeContext(context);
        xmlFreeDoc(doc);
        return;
    }

    if (xmlXPathNodeSetIsEmpty(result->nodesetval)) {
        fprintf(stderr, "No results for XPath query\n");
    } else {
        xmlNodeSetPtr nodes = result->nodesetval;
        for (int i = 0; i < nodes->nodeNr; i++) {
            xmlNodePtr node = nodes->nodeTab[i];
            char *content = (char *)xmlNodeGetContent(node);
            fprintf(csv_file, "%s,%s\n", label, content);
            xmlFree(content);
        }
    }

    xmlXPathFreeObject(result);
    xmlXPathFreeContext(context);
    xmlFreeDoc(doc);
}

int main() {
    const char *url = "https://books.toscrape.com/catalogue/category/books/science_22/index.html"; // Target e-commerce page
    const char *product_name_xpath = "//h3/a"; // Adjusted for book titles
    const char *price_xpath = "//p[@class='price_color']"; // Adjusted for prices
    const char *rating_xpath = "//p[contains(@class, 'star-rating')]/@class"; // Adjusted for ratings

    // Fetch webpage content
    char *html = fetch_webpage(url);
    if (!html) {
        fprintf(stderr, "Failed to fetch webpage\n");
        return 1;
    }

    // Open CSV file for writing
    FILE *csv_file = fopen("products.csv", "w");
    if (!csv_file) {
        fprintf(stderr, "Failed to open CSV file\n");
        free(html);
        return 1;
    }

    fprintf(csv_file, "Type,Content\n"); // Write CSV header

    // Extract and write product information
    extract_product_info(html, product_name_xpath, csv_file, "Name");
    extract_product_info(html, price_xpath, csv_file, "Price");
    extract_product_info(html, rating_xpath, csv_file, "Rating");

    // Clean up
    fclose(csv_file);
    free(html);

    printf("Product information has been saved to products.csv\n");
    return 0;
}
